#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <sys/stat.h>

#define MAX_LINE_LENGTH 1024
#define MAX_PATHS 100

int main() {
    FILE *file = fopen(".preinit", "r");
    if (!file) {
        perror("Error opening .preinit");
        return EXIT_FAILURE;
    }

    char line[MAX_LINE_LENGTH];
    int line_number = 0;
    while (fgets(line, sizeof(line), file)) {
        line_number++;

        // Remove newline character if present
        char *newline = strchr(line, '\n');
        if (newline) {
            *newline = '\0';
        }

        char *ptr = line;
        while (*ptr == ' ' || *ptr == '\t') ptr++;  // Skip leading whitespace

        if (strncmp(ptr, "link", 4) == 0) {
            ptr += 4;
            while (*ptr == ' ' || *ptr == '\t') ptr++;  // Skip spaces

            if (*ptr != '"') {
                fprintf(stderr, "Error on line %d: Source path not quoted\n", line_number);
                fclose(file);
                return EXIT_FAILURE;
            }
            ptr++;  // Skip opening quote

            char source[MAX_LINE_LENGTH];
            char *src_ptr = source;
            while (*ptr != '"' && *ptr != '\0') {
                *src_ptr++ = *ptr++;
            }
            *src_ptr = '\0';

            if (*ptr != '"') {
                fprintf(stderr, "Error on line %d: No closing quote for source path\n", line_number);
                fclose(file);
                return EXIT_FAILURE;
            }
            ptr++;  // Skip closing quote

            while (*ptr == ' ' || *ptr == '\t') ptr++;  // Skip spaces

            if (strncmp(ptr, "as", 2) == 0) {
                ptr += 2;
                while (*ptr == ' ' || *ptr == '\t') ptr++;  // Skip spaces

                if (*ptr == '\0' || *ptr == '\n') {
                    fprintf(stderr, "Error on line %d: No destination paths specified after 'as'\n", line_number);
                    fclose(file);
                    return EXIT_FAILURE;
                }

                char *destinations[MAX_PATHS];
                int num_dests = 0;
                while (*ptr != '\0') {
                    if (*ptr != '"') {
                        fprintf(stderr, "Error on line %d: Destination path not quoted\n", line_number);
                        fclose(file);
                        return EXIT_FAILURE;
                    }
                    ptr++;  // Skip opening quote

                    char dest[MAX_LINE_LENGTH];
                    char *dest_ptr = dest;
                    while (*ptr != '"' && *ptr != '\0') {
                        *dest_ptr++ = *ptr++;
                    }
                    *dest_ptr = '\0';

                    if (*ptr != '"') {
                        fprintf(stderr, "Error on line %d: No closing quote for destination path\n", line_number);
                        fclose(file);
                        return EXIT_FAILURE;
                    }
                    ptr++;  // Skip closing quote

                    destinations[num_dests] = strdup(dest);
                    if (!destinations[num_dests]) {
                        perror("Error duplicating destination path");
                        fclose(file);
                        return EXIT_FAILURE;
                    }
                    num_dests++;

                    while (*ptr == ' ' || *ptr == '\t') ptr++;  // Skip spaces

                    if (*ptr == '\n' || *ptr == '\0') break;  // End of line or file
                }

                // Check if the source path exists
                if (access(source, F_OK) != 0) {
                    fprintf(stderr, "Warning on line %d: Source path '%s' does not exist\n", line_number, source);
                }

                // Create symlinks
                for (int i = 0; i < num_dests; i++) {
                    struct stat sb;
                    if (lstat(destinations[i], &sb) == 0) {
                        if (S_ISLNK(sb.st_mode)) {
                            fprintf(stderr, "Warning on line %d: Symlink already exists at '%s'\n", line_number, destinations[i]);
                        } else {
                            fprintf(stderr, "Warning on line %d: File or directory already exists at '%s'\n", line_number, destinations[i]);
                        }
                        continue;  // Move to the next destination
                    }

                    if (symlink(source, destinations[i]) == -1) {
                        fprintf(stderr, "Error creating symlink %s -> %s: %s\n", destinations[i], source, strerror(errno));
                        fclose(file);
                        return EXIT_FAILURE;
                    }
                }

                // Free allocated memory for destination paths
                for (int i = 0; i < num_dests; i++) {
                    free(destinations[i]);
                }
            } else {
                fprintf(stderr, "Error on line %d: Expected 'as' after source path\n", line_number);
                fclose(file);
                return EXIT_FAILURE;
            }
        } else {
            fprintf(stderr, "Error on line %d: Unknown directive '%s'\n", line_number, line);
            fclose(file);
            return EXIT_FAILURE;
        }
    }

    fclose(file);
    return EXIT_SUCCESS;
}
