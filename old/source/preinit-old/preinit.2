#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <syslog.h>

#define MAX_LINE_LENGTH 1024
#define MAX_PATHS 100

void log_message(const char *message) {
    openlog(NULL, LOG_PID | LOG_CONS, LOG_USER);
    syslog(LOG_ERR, "%s", message);
    closelog();
}

void report_error(const char *program_name, const char *message) {
    char full_message[MAX_LINE_LENGTH];
    snprintf(full_message, sizeof(full_message), "Error - %s :: %s", message, program_name);
    log_message(full_message);
}

void report_warning(const char *program_name, const char *message) {
    char full_message[MAX_LINE_LENGTH];
    snprintf(full_message, sizeof(full_message), "Warning - %s :: %s", message, program_name);
    log_message(full_message);
}

void execute_init_apps(const char *init_apps[], int num_apps) {
    for (int i = 0; i < num_apps; i++) {
        char *argv[] = { (char *)init_apps[i], NULL };

        // Attempt to execute the init application
        if (execvp(init_apps[i], argv) == -1) {
            // If execvp() fails, log the error and try the next application
            report_warning("execute_init_apps", strerror(errno));
        }
    }

    // If none of the execvp() calls succeed, the function will return to here
    // We can exit with an error code or perform other actions if needed
    report_error("execute_init_apps", "None of the init applications could be executed");
    exit(EXIT_FAILURE);
}

int main(int argc, char *argv[]) {
    // The program name and location
    const char *program_name = argv[0];

    FILE *file = fopen(".preinit", "r");  // Open the .preinit file
    if (!file) {
        report_error(program_name, "Unable to open .preinit");
    }

    char line[MAX_LINE_LENGTH];
    int line_number = 0;
    while (fgets(line, sizeof(line), file)) {
        line_number++;

        char *newline = strchr(line, '\n');
        if (newline) {
            *newline = '\0';
        }

        char *ptr = line;
        while (*ptr == ' ' || *ptr == '\t') ptr++;

        if (strncmp(ptr, "link", 4) == 0) {
            ptr += 4;
            while (*ptr == ' ' || *ptr == '\t') ptr++;

            if (*ptr != '"') {
                report_error(program_name, "Source path not quoted");
            }
            ptr++;

            char source[MAX_LINE_LENGTH];
            char *src_ptr = source;
            while (*ptr != '"' && *ptr != '\0') {
                *src_ptr++ = *ptr++;
            }
            *src_ptr = '\0';

            if (*ptr != '"') {
                report_error(program_name, "No closing quote for source path");
            }
            ptr++;

            while (*ptr == ' ' || *ptr == '\t') ptr++;

            if (strncmp(ptr, "as", 2) == 0) {
                ptr += 2;
                while (*ptr == ' ' || *ptr == '\t') ptr++;

                if (*ptr == '\0' || *ptr == '\n') {
                    report_error(program_name, "No destination paths specified after 'as'");
                }

                char *destinations[MAX_PATHS];
                int num_dests = 0;
                while (*ptr != '\0') {
                    if (*ptr != '"') {
                        report_error(program_name, "Destination path not quoted");
                    }
                    ptr++;

                    char dest[MAX_LINE_LENGTH];
                    char *dest_ptr = dest;
                    while (*ptr != '"' && *ptr != '\0') {
                        *dest_ptr++ = *ptr++;
                    }
                    *dest_ptr = '\0';

                    if (*ptr != '"') {
                        report_error(program_name, "No closing quote for destination path");
                    }
                    ptr++;

                    destinations[num_dests] = strdup(dest);
                    if (!destinations[num_dests]) {
                        perror("Error duplicating destination path");
                        exit(EXIT_FAILURE);
                    }
                    num_dests++;

                    while (*ptr == ' ' || *ptr == '\t') ptr++;

                    if (*ptr == '\n' || *ptr == '\0') break;
                }

                if (access(source, F_OK) != 0) {
                    report_warning(program_name, "Source path does not exist");
                }

                for (int i = 0; i < num_dests; i++) {
                    struct stat sb;
                    if (lstat(destinations[i], &sb) == 0) {
                        if (S_ISLNK(sb.st_mode)) {
                            report_warning(program_name, "Symlink already exists at destination path");
                        } else {
                            report_warning(program_name, "File or directory already exists at destination path");
                        }
                        continue;
                    }

                    if (symlink(source, destinations[i]) == -1) {
                        report_error(program_name, "Error creating symlink");
                    }
                }

                for (int i = 0; i < num_dests; i++) {
                    free(destinations[i]);
                }
            } else {
                char unknown_directive[MAX_LINE_LENGTH];
                snprintf(unknown_directive, sizeof(unknown_directive), "Unknown directive '%s' on line %d", ptr, line_number);
                report_error(program_name, unknown_directive);
            }
        } else {
            char unknown_directive[MAX_LINE_LENGTH];
            snprintf(unknown_directive, sizeof(unknown_directive), "Unknown directive '%s' on line %d", ptr, line_number);
            report_error(program_name, unknown_directive);
        }
    }

    fclose(file);

    // Define the init applications
    const char *init_apps[] = {
        "/sbin/init",
        "/etc/init",
        "/bin/init",
        "/bin/sh",
    };
    int num_apps = sizeof(init_apps) / sizeof(init_apps[0]);

    // Execute the init applications
    execute_init_apps(init_apps, num_apps);

    return EXIT_SUCCESS;
}
