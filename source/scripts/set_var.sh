#!/bin/bash
#
# This shell script is used to set the value specified
# by <argument-2> of a variable specified in <argument-1>
# to the file specified in <argument-3>.
#
# Part of the MRain scripts source code.
#

# Fancy output functions
info() {
    echo -e ${col_INFO} ++ ${1} ++${col_NORMAL}  ::  ${col_FALSE}${me}${col_NORMAL}
}

error() {
    echo -e ${me}: $2: ${col_ERROR}$1${col_NORMAL}
    exit 1
}

# Set variables
me="$0"
me_dir="$(dirname "$0")"
variable="$1"
value="$2"
out_file="$3"
time=$(date '+%Y-%m-%d %H:%M:%S')

# Source main
source "${me_dir}/main"

# Check if the variables are empty
if [ -z "$variable" ]; then
    error "Variable cannot be empty. Check the first argument." "variable"
elif [ -z "$value" ]; then
    error "Variable cannot be empty. Check the second argument." "value"
elif [ -z "$out_file" ]; then
    error "Variable cannot be empty. Check the third argument." "out_file"
fi

# Check if the file exists
if [ ! -f "$out_file" ]; then
    info "Specified file doesn't exist, auto-creating it instead."
    echo "#" >> $out_file
    echo "# Auto-generated by $me on $time." >> $out_file
    echo "#" >> $out_file
    echo "" >> $out_file
    echo "$variable=$value" >> $out_file
    exit 0
fi

# Look through the file for the variable
definition=$(grep -E "^${variable}=" "$out_file")

# Count the number of variable definitons
num_definitions=$(echo "$definition" | wc -l)

# Check if the number is less than or greater than one
if [ "$num_definitions" -eq 0 ] || [ -z "$definition" ]; then
    echo "$variable=$value" >> $out_file
elif [ "$num_definitions" -gt 1 ]; then
    error "More than one definition for '${variable}'. Cannot continue." "$out_file"
else
    # Use sed to find the line starting with the variable name and replace the whole line
    sed -i "s/^$variable=.*/$variable=$value/" "$out_file"
fi
